"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ VPN Bot System
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from loguru import logger

from config.settings import settings
from config.database import init_database, init_redis, close_connections
from bots.shared.middleware.database import DatabaseMiddleware
from bots.shared.middleware.logging import LoggingMiddleware
from bots.client.middleware.auth import AuthMiddleware
from bots.client.middleware.subscription import SubscriptionMiddleware
from bots.client.middleware.throttling import ThrottlingMiddleware

# –ò–º–ø–æ—Ä—Ç —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
from bots.client.handlers import (
    start, subscription, profile, servers, 
    support, payment, configs
)


class ClientBot:
    """–ö–ª–∞—Å—Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.storage = None
    
    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            self.bot = Bot(
                token=settings.CLIENT_BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Redis storage –¥–ª—è FSM
            redis_url = settings.REDIS_URL
            self.storage = RedisStorage.from_url(redis_url)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.dp = Dispatcher(storage=self.storage)
            
            logger.info("Client bot configured successfully")
            
        except Exception as e:
            logger.error(f"Error setting up client bot: {e}")
            raise
    
    async def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        try:
            # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–º)
            self.dp.update.middleware(LoggingMiddleware())
            
            # Middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.dp.update.middleware(DatabaseMiddleware())
            
            # Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.dp.message.middleware(AuthMiddleware())
            self.dp.callback_query.middleware(AuthMiddleware())
            
            # Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            self.dp.message.middleware(SubscriptionMiddleware())
            self.dp.callback_query.middleware(SubscriptionMiddleware())
            
            # Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
            self.dp.message.middleware(ThrottlingMiddleware())
            self.dp.callback_query.middleware(ThrottlingMiddleware())
            
            logger.info("Client bot middleware configured")
            
        except Exception as e:
            logger.error(f"Error setting up middleware: {e}")
            raise
    
    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            
            # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            self.dp.include_router(start.router)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            self.dp.include_router(subscription.router)
            self.dp.include_router(profile.router)
            self.dp.include_router(servers.router)
            self.dp.include_router(configs.router)
            self.dp.include_router(payment.router)
            self.dp.include_router(support.router)
            
            logger.info("Client bot handlers configured")
            
        except Exception as e:
            logger.error(f"Error setting up handlers: {e}")
            raise
    
    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
            await init_database()
            await init_redis()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"Client bot started: @{bot_info.username}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
            await self.set_bot_commands()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            await self.notify_admins_startup()
            
        except Exception as e:
            logger.error(f"Error during bot startup: {e}")
            raise
    
    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        try:
            logger.info("Client bot shutting down...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await close_connections()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º storage
            if self.storage:
                await self.storage.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
            
            logger.info("Client bot shutdown completed")
            
        except Exception as e:
            logger.error(f"Error during bot shutdown: {e}")
    
    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            from aiogram.types import BotCommand
            
            commands = [
                BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
                BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                BotCommand(command="subscription", description="üì¶ –ü–æ–¥–ø–∏—Å–∫–∏"),
                BotCommand(command="servers", description="üåç –°–µ—Ä–≤–µ—Ä—ã"),
                BotCommand(command="configs", description="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
                BotCommand(command="support", description="üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
            ]
            
            await self.bot.set_my_commands(commands)
            logger.info("Bot commands set successfully")
            
        except Exception as e:
            logger.error(f"Error setting bot commands: {e}")
    
    async def notify_admins_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            if not settings.ADMIN_TELEGRAM_IDS:
                return
            
            startup_message = (
                "üöÄ <b>Client Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.ENVIRONMENT}\n"
                f"üîß –í–µ—Ä—Å–∏—è: {settings.VERSION}"
            )
            
            for admin_id in settings.ADMIN_TELEGRAM_IDS:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=startup_message
                    )
                except Exception as e:
                    logger.warning(f"Failed to notify admin {admin_id}: {e}")
            
        except Exception as e:
            logger.error(f"Error notifying admins: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("Starting client bot polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(
                self.bot,
                on_startup=self.on_startup,
                on_shutdown=self.on_shutdown,
                allowed_updates=['message', 'callback_query', 'inline_query']
            )
            
        except Exception as e:
            logger.error(f"Error during polling: {e}")
            raise
    
    async def start_webhook(self, webhook_url: str, webhook_path: str = "/webhook"):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            from aiohttp import web
            from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
            
            logger.info(f"Starting client bot webhook: {webhook_url}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await self.bot.set_webhook(
                url=webhook_url,
                secret_token=settings.WEBHOOK_SECRET
            )
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
            SimpleRequestHandler(
                dispatcher=self.dp,
                bot=self.bot,
                secret_token=settings.WEBHOOK_SECRET
            ).register(app, path=webhook_path)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            setup_application(app, self.dp, bot=self.bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()
            
            site = web.TCPSite(runner, host="0.0.0.0", port=8001)
            await site.start()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º startup
            await self.on_startup()
            
            logger.info("Client bot webhook started successfully")
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            await asyncio.Event().wait()
            
        except Exception as e:
            logger.error(f"Error during webhook: {e}")
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add(
        "logs/client_bot.log",
        level=settings.LOG_LEVEL,
        rotation=settings.LOG_ROTATION,
        retention=settings.LOG_RETENTION,
        format=settings.LOG_FORMAT
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not settings.CLIENT_BOT_TOKEN:
        logger.error("CLIENT_BOT_TOKEN not found in settings")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    client_bot = ClientBot()
    
    try:
        await client_bot.setup_bot()
        await client_bot.setup_middleware()
        await client_bot.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if settings.WEBHOOK_DOMAIN:
            webhook_url = f"{settings.WEBHOOK_DOMAIN}/client/webhook"
            await client_bot.start_webhook(webhook_url)
        else:
            await client_bot.start_polling()
            
    except KeyboardInterrupt:
        logger.info("Client bot stopped by user")
    except Exception as e:
        logger.error(f"Client bot crashed: {e}")
        sys.exit(1)
    finally:
        await client_bot.on_shutdown()


if __name__ == "__main__":
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç
    from datetime import datetime
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())