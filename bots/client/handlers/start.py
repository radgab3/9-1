"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from loguru import logger

from bots.client.states.client_states import RegistrationStates, MainMenuStates
from bots.client.keyboards.inline import get_main_menu_keyboard, get_registration_keyboard
from bots.client.keyboards.reply import get_language_keyboard
from bots.shared.utils.formatters import format_user_greeting, format_welcome_message
from core.services.user_service import UserService
from core.services.subscription_service import SubscriptionService
from config.settings import settings

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not user.last_activity:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await show_welcome_message(message, user, state)
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(message, user, state)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await user_service.log_user_action(
            user_id=user.id,
            action="start_command",
            details={"first_visit": not user.last_activity}
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None
        )


async def show_welcome_message(message: Message, user, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        welcome_text = format_welcome_message(user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            text=welcome_text,
            reply_markup=get_registration_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.set_state(RegistrationStates.waiting_for_agreement)
        
    except Exception as e:
        logger.error(f"Error showing welcome message: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")


async def show_main_menu(message: Message, user, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        subscription_service = SubscriptionService(message.bot.session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        active_subscription = await subscription_service.get_active_subscription(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = format_user_greeting(user, active_subscription)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text=greeting,
            reply_markup=get_main_menu_keyboard(user, active_subscription)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(MainMenuStates.main_menu)
        
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")


@router.callback_query(F.data == "registration_agree")
async def registration_agree(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        await user_service.log_user_action(
            user_id=user.id,
            action="terms_accepted",
            details={"accepted_at": "registration"}
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        await callback.message.edit_text(
            "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>",
            reply_markup=get_language_keyboard()
        )
        
        await state.set_state(RegistrationStates.waiting_for_language)
        
    except Exception as e:
        logger.error(f"Error in registration agree: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        language = callback.data.split("_")[1]
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_service.update_user_preferences(
            user_id=user.id,
            language_code=language
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        complete_text = (
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot! üöÄ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üî∏ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
            "üî∏ –ü–æ–ª—É—á–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            "üî∏ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
        )
        
        from bots.client.keyboards.inline import get_start_journey_keyboard
        
        await callback.message.edit_text(
            text=complete_text,
            reply_markup=get_start_journey_keyboard()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error setting language: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞", show_alert=True)


@router.callback_query(F.data == "start_journey")
async def start_journey(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await show_main_menu(callback.message, user, state)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await user_service.log_user_action(
            user_id=user.id,
            action="journey_started"
        )
        
    except Exception as e:
        logger.error(f"Error starting journey: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ", show_alert=True)


@router.message(Command("help"))
async def cmd_help(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = (
            "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
            
            "üöÄ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üë§ /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "üì¶ /subscription - –ü–æ–¥–ø–∏—Å–∫–∏\n"
            "üåç /servers - –°–µ—Ä–≤–µ—Ä—ã\n"
            "‚öôÔ∏è /configs - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            "üéß /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            
            "‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n"
            "3Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            "4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
            
            "üîó <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:</b>\n"
            "‚Ä¢ VLESS (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ OpenVPN\n"
            "‚Ä¢ WireGuard\n\n"
            
            "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
        
        await message.answer(
            text=help_text,
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏")


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext, session, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            await show_main_menu(message, user, state)
        else:
            await cmd_start(message, state, session, **kwargs)
            
    except Exception as e:
        logger.error(f"Error in menu command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            subscription_service = SubscriptionService(session)
            active_subscription = await subscription_service.get_active_subscription(user.id)
            
            greeting = format_user_greeting(user, active_subscription)
            
            await callback.message.edit_text(
                text=greeting,
                reply_markup=get_main_menu_keyboard(user, active_subscription)
            )
            
            await state.set_state(MainMenuStates.main_menu)
        
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ", show_alert=True)