"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from bots.client.states.client_states import ProfileStates
from bots.client.keyboards.inline import get_profile_keyboard, get_back_button
from core.services.user_service import UserService
from core.services.subscription_service import SubscriptionService
from core.database.repositories import RepositoryManager
from core.database.models import VpnProtocol
from core.utils.helpers import format_bytes, format_duration, format_datetime

router = Router()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        subscription_service = SubscriptionService(session)
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        active_subscription = await subscription_service.get_active_subscription(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await user_service.get_user_statistics(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"üÜî <b>ID:</b> {user.telegram_id}\n"
        if user.username:
            text += f"üë§ <b>Username:</b> @{user.username}\n"
        text += f"üìù <b>–ò–º—è:</b> {user.first_name}"
        if user.last_name:
            text += f" {user.last_name}"
        text += "\n"
        text += f"üåç <b>–Ø–∑—ã–∫:</b> {user.language_code.upper()}\n"
        text += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {format_datetime(user.created_at)}\n"
        
        if user.last_activity:
            text += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {format_datetime(user.last_activity)}\n"
        
        text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if active_subscription:
            expires_at = active_subscription.expires_at
            days_left = (expires_at - datetime.utcnow()).days if expires_at else 0
            
            text += "üì¶ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            text += f"   ‚Ä¢ –ü–ª–∞–Ω: {active_subscription.plan.name}\n"
            text += f"   ‚Ä¢ –°–µ—Ä–≤–µ—Ä: {active_subscription.server.name}\n"
            text += f"   ‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: {active_subscription.active_protocol.value.upper()}\n"
            
            if expires_at:
                if days_left > 0:
                    text += f"   ‚Ä¢ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days_left} –¥–Ω–µ–π\n"
                    text += f"   ‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {format_datetime(expires_at)}\n"
                else:
                    text += f"   ‚Ä¢ ‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
            if active_subscription.traffic_limit_gb:
                used_gb = active_subscription.traffic_used_gb
                limit_gb = active_subscription.traffic_limit_gb
                percent_used = (used_gb / limit_gb) * 100 if limit_gb > 0 else 0
                text += f"   ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {used_gb:.1f} –ì–ë / {limit_gb} –ì–ë ({percent_used:.1f}%)\n"
            else:
                text += f"   ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {active_subscription.traffic_used_gb:.1f} –ì–ë (–±–µ–∑–ª–∏–º–∏—Ç)\n"
        else:
            text += "üì¶ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> –ù–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
        
        text += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {user_stats.get('total_subscriptions', 0)}\n"
        text += f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(user_stats.get('total_traffic_bytes', 0))}\n"
        text += f"   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {user_stats.get('total_configs', 0)}\n"
        
        # VPN –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        text += "\nüîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN:</b>\n"
        if user.preferred_protocol:
            text += f"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {user.preferred_protocol.value.upper()}\n"
        else:
            text += f"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: –ê–≤—Ç–æ–≤—ã–±–æ—Ä\n"
        text += f"   ‚Ä¢ –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {'–î–∞' if user.auto_select_protocol else '–ù–µ—Ç'}\n"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_profile_keyboard()
        )
        
        await state.set_state(ProfileStates.viewing_stats)
        
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)


@router.callback_query(F.data == "profile_stats")
async def show_detailed_stats(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        detailed_stats = await user_service.get_detailed_statistics(user.id)
        
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_stats = detailed_stats.get('monthly_stats', [])
        if monthly_stats:
            text += "üìà <b>–ü–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6):</b>\n"
            for month_stat in monthly_stats[-6:]:
                month_name = month_stat['month']
                traffic_gb = month_stat['traffic_gb']
                text += f"   ‚Ä¢ {month_name}: {traffic_gb:.1f} –ì–ë\n"
        else:
            text += "üìà <b>–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n"
        
        text += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        server_stats = detailed_stats.get('server_stats', [])
        if server_stats:
            text += "üåç <b>–ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</b>\n"
            for server_stat in server_stats:
                server_name = server_stat['server_name']
                sessions = server_stat['sessions']
                traffic_gb = server_stat['traffic_gb']
                text += f"   ‚Ä¢ {server_name}: {sessions} —Å–µ—Å—Å–∏–π, {traffic_gb:.1f} –ì–ë\n"
        else:
            text += "üåç <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:</b> –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n"
        
        text += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
        protocol_stats = detailed_stats.get('protocol_stats', [])
        if protocol_stats:
            text += "üîê <b>–ü–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º:</b>\n"
            for protocol_stat in protocol_stats:
                protocol = protocol_stat['protocol']
                usage_percent = protocol_stat['usage_percent']
                text += f"   ‚Ä¢ {protocol.upper()}: {usage_percent:.1f}%\n"
        else:
            text += "üîê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤:</b> –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_activity = detailed_stats.get('week_activity', [])
        if week_activity:
            text += "\nüìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            total_actions = sum(day['actions'] for day in week_activity)
            text += f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}\n"
            text += f"   ‚Ä¢ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {len([d for d in week_activity if d['actions'] > 0])}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_user_data"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="profile_stats")
            ],
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "profile_settings")
async def show_profile_settings(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_settings = await user_service.get_notification_settings(user.id)
        
        text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        text += "üåç <b>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</b>\n"
        text += f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π: {user.language_code.upper()}\n\n"
        
        text += "üîê <b>VPN –ø—Ä–æ—Ç–æ–∫–æ–ª:</b>\n"
        if user.preferred_protocol:
            text += f"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π: {user.preferred_protocol.value.upper()}\n"
        else:
            text += f"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π: –ê–≤—Ç–æ–≤—ã–±–æ—Ä\n"
        text += f"   ‚Ä¢ –ê–≤—Ç–æ–≤—ã–±–æ—Ä: {'–í–∫–ª—é—á–µ–Ω' if user.auto_select_protocol else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text += "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        expiry_notifications = notification_settings.get('expiry_notifications', True)
        maintenance_notifications = notification_settings.get('maintenance_notifications', True)
        news_notifications = notification_settings.get('news_notifications', False)
        
        text += f"   ‚Ä¢ –û–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if expiry_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"   ‚Ä¢ –û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö: {'–í–∫–ª—é—á–µ–Ω—ã' if maintenance_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        text += f"   ‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if news_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", callback_data="settings_language"),
                InlineKeyboardButton(text="üîê –ü—Ä–æ—Ç–æ–∫–æ–ª", callback_data="settings_protocol")
            ],
            [
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
                InlineKeyboardButton(text="üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", callback_data="settings_interface")
            ],
            [
                InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings_privacy"),
                InlineKeyboardButton(text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="settings_devices")
            ],
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
        await state.set_state(ProfileStates.editing_settings)
        
    except Exception as e:
        logger.error(f"Error showing profile settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "settings_language")
async def change_language(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        await callback.answer()
        
        text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</b>\n\n"
        text += "Choose your interface language:\n\n"
        text += "üá∑üá∫ –†—É—Å—Å–∫–∏–π - –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏\n"
        text += "üá∫üá∏ English - for international users"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
                InlineKeyboardButton(text="üá∫üá∏ English", callback_data="set_lang_en")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_settings")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
        await state.set_state(ProfileStates.editing_language)
        
    except Exception as e:
        logger.error(f"Error changing language: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_lang_"))
async def set_language(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"""
    try:
        await callback.answer()
        
        language = callback.data.split("_")[2]
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫
        success = await user_service.update_user_preferences(
            user_id=user.id,
            language_code=language
        )
        
        if success:
            lang_names = {
                "ru": "—Ä—É—Å—Å–∫–∏–π", 
                "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
            }
            
            if language == "en":
                text = f"‚úÖ Interface language changed to English"
            else:
                text = f"‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_names.get(language, language)}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="language_changed",
                details={"new_language": language}
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞ / Error changing language"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º / Back to settings", callback_data="profile_settings")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error setting language: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞", show_alert=True)


@router.callback_query(F.data == "settings_protocol")
async def change_protocol_settings(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        text = "üîê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∞–≤—Ç–æ–≤—ã–±–æ—Ä:\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        text += "üî• <b>VLESS</b> - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –†–æ—Å—Å–∏–∏\n"
        text += "   ‚Ä¢ –õ—É—á—à–∏–π –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
        text += "   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Reality\n"
        text += "   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n\n"
        
        text += "üíô <b>VMess</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª\n"
        text += "   ‚Ä¢ –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        text += "   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n\n"
        
        text += "üõ°Ô∏è <b>OpenVPN</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª\n"
        text += "   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        text += "   ‚Ä¢ –ù–∞–¥–µ–∂–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        
        text += "‚ö° <b>WireGuard</b> - –±—ã—Å—Ç—Ä—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π\n"
        text += "   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        text += "   ‚Ä¢ –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ\n\n"
        
        text += "ü§ñ <b>–ê–≤—Ç–æ–≤—ã–±–æ—Ä</b> - —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if user.preferred_protocol:
            text += f"\n\n<b>–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:</b> {user.preferred_protocol.value.upper()}"
        else:
            text += f"\n\n<b>–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:</b> –ê–≤—Ç–æ–≤—ã–±–æ—Ä"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî• VLESS", callback_data="set_protocol_vless"),
                InlineKeyboardButton(text="üíô VMess", callback_data="set_protocol_vmess")
            ],
            [
                InlineKeyboardButton(text="üõ°Ô∏è OpenVPN", callback_data="set_protocol_openvpn"),
                InlineKeyboardButton(text="‚ö° WireGuard", callback_data="set_protocol_wireguard")
            ],
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–≤—ã–±–æ—Ä", callback_data="set_protocol_auto")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_settings")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
        await state.set_state(ProfileStates.changing_protocol)
        
    except Exception as e:
        logger.error(f"Error showing protocol settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_protocol_"))
async def set_protocol_preference(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª"""
    try:
        await callback.answer()
        
        protocol_choice = callback.data.split("_")[2]
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if protocol_choice == "auto":
            preferred_protocol = None
            auto_select = True
            protocol_name = "–ê–≤—Ç–æ–≤—ã–±–æ—Ä"
        else:
            preferred_protocol = VpnProtocol(protocol_choice)
            auto_select = False
            protocol_names = {
                "vless": "VLESS",
                "vmess": "VMess",
                "openvpn": "OpenVPN",
                "wireguard": "WireGuard"
            }
            protocol_name = protocol_names.get(protocol_choice, protocol_choice.upper())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await user_service.update_user_preferences(
            user_id=user.id,
            preferred_protocol=preferred_protocol,
            auto_select_protocol=auto_select
        )
        
        if success:
            text = f"‚úÖ <b>–ü—Ä–æ—Ç–æ–∫–æ–ª –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            text += f"üîê –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {protocol_name}\n\n"
            
            if protocol_choice != "auto":
                text += f"üìù <b>–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</b>\n"
                text += f"‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è {protocol_name}\n"
                text += f"‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                text += f"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Ä—É—á–Ω—É—é"
            else:
                text += f"üìù <b>–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</b>\n"
                text += f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª\n"
                text += f"‚Ä¢ –î–ª—è –†–æ—Å—Å–∏–∏ –æ–±—ã—á–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è VLESS\n"
                text += f"‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="protocol_preference_changed",
                details={
                    "new_protocol": protocol_choice,
                    "auto_select": auto_select
                }
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="settings_protocol"),
                InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="profile_settings")
            ]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error setting protocol preference: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", show_alert=True)


@router.callback_query(F.data == "settings_notifications")
async def notification_settings(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_settings = await user_service.get_notification_settings(user.id)
        
        text = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        
        expiry_notifications = notification_settings.get('expiry_notifications', True)
        maintenance_notifications = notification_settings.get('maintenance_notifications', True)
        news_notifications = notification_settings.get('news_notifications', False)
        security_notifications = notification_settings.get('security_notifications', True)
        
        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —ç–º–æ–¥–∑–∏
        text += f"‚è∞ <b>–ò—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n"
        text += f"   {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if expiry_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        text += f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –∏ –≤ –¥–µ–Ω—å –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n"
        
        text += f"üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n"
        text += f"   {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if maintenance_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        text += f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö\n\n"
        
        text += f"üì¢ <b>–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n"
        text += f"   {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if news_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        text += f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è—Ö\n\n"
        
        text += f"üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>\n"
        text += f"   {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if security_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        text += f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ' if expiry_notifications else '‚ùå'}",
                    callback_data="toggle_expiry_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã: {'‚úÖ' if maintenance_notifications else '‚ùå'}",
                    callback_data="toggle_maintenance_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üì¢ –ù–æ–≤–æ—Å—Ç–∏: {'‚úÖ' if news_notifications else '‚ùå'}",
                    callback_data="toggle_news_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'‚úÖ' if security_notifications else '‚ùå'}",
                    callback_data="toggle_security_notifications"
                )
            ],
            [
                InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="disable_all_notifications"),
                InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="enable_all_notifications")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_settings")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing notification settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_notification_setting(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.answer()
        
        setting_type = callback.data.replace("toggle_", "")
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await user_service.get_notification_settings(user.id)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current_value = current_settings.get(setting_type, True)
        new_value = not current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await user_service.update_notification_settings(
            user_id=user.id,
            **{setting_type: new_value}
        )
        
        if success:
            setting_names = {
                "expiry_notifications": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                "maintenance_notifications": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö",
                "news_notifications": "–Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                "security_notifications": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            }
            
            setting_name = setting_names.get(setting_type, setting_type)
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            
            await callback.answer(f"‚úÖ {setting_name.capitalize()} {status}", show_alert=False)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="notification_setting_changed",
                details={
                    "setting": setting_type,
                    "new_value": new_value
                }
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await notification_settings(callback, state, session, **kwargs)
        
    except Exception as e:
        logger.error(f"Error toggling notification setting: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "disable_all_notifications")
async def disable_all_notifications(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        success = await user_service.update_notification_settings(
            user_id=user.id,
            expiry_notifications=False,
            maintenance_notifications=False,
            news_notifications=False,
            security_notifications=False
        )
        
        if success:
            await callback.answer("üîï –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", show_alert=False)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="all_notifications_disabled"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await notification_settings(callback, state, session, **kwargs)
        
    except Exception as e:
        logger.error(f"Error disabling all notifications: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "enable_all_notifications")
async def enable_all_notifications(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        success = await user_service.update_notification_settings(
            user_id=user.id,
            expiry_notifications=True,
            maintenance_notifications=True,
            news_notifications=True,
            security_notifications=True
        )
        
        if success:
            await callback.answer("üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã", show_alert=False)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="all_notifications_enabled"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await notification_settings(callback, state, session, **kwargs)
        
    except Exception as e:
        logger.error(f"Error enabling all notifications: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "settings_privacy")
async def privacy_settings(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        privacy_settings = await user_service.get_privacy_settings(user.id)
        
        text = "üîí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
        
        analytics_enabled = privacy_settings.get('analytics_enabled', True)
        error_reporting = privacy_settings.get('error_reporting', True)
        usage_statistics = privacy_settings.get('usage_statistics', True)
        
        text += f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n"
        text += f"   {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if analytics_enabled else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ'}\n"
        text += f"   –ü–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å\n\n"
        
        text += f"üêõ <b>–û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö</b>\n"
        text += f"   {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if error_reporting else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ'}\n"
        text += f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–±–æ—è—Ö\n\n"
        
        text += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n"
        text += f"   {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if usage_statistics else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ'}\n"
        text += f"   –°–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n\n"
        
        text += "üõ°Ô∏è <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã:</b>\n"
        text += "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        text += "‚Ä¢ –•—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {'‚úÖ' if analytics_enabled else '‚ùå'}",
                    callback_data="toggle_analytics"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üêõ –û—Ç—á–µ—Ç—ã: {'‚úÖ' if error_reporting else '‚ùå'}",
                    callback_data="toggle_error_reporting"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ' if usage_statistics else '‚ùå'}",
                    callback_data="toggle_usage_stats"
                )
            ],
            [
                InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="privacy_policy"),
            ],
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="delete_user_data"),
                InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_user_data")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_settings")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing privacy settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data.startswith("toggle_analytics"))
@router.callback_query(F.data.startswith("toggle_error_reporting"))
@router.callback_query(F.data.startswith("toggle_usage_stats"))
async def toggle_privacy_setting(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        setting_mapping = {
            "toggle_analytics": "analytics_enabled",
            "toggle_error_reporting": "error_reporting", 
            "toggle_usage_stats": "usage_statistics"
        }
        
        setting_type = setting_mapping.get(callback.data)
        if not setting_type:
            return
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await user_service.get_privacy_settings(user.id)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        current_value = current_settings.get(setting_type, True)
        new_value = not current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await user_service.update_privacy_settings(
            user_id=user.id,
            **{setting_type: new_value}
        )
        
        if success:
            setting_names = {
                "analytics_enabled": "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "error_reporting": "–æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö",
                "usage_statistics": "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            }
            
            setting_name = setting_names.get(setting_type, setting_type)
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            
            await callback.answer(f"‚úÖ {setting_name.capitalize()} {status}", show_alert=False)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await user_service.log_user_action(
                user_id=user.id,
                action="privacy_setting_changed",
                details={
                    "setting": setting_type,
                    "new_value": new_value
                }
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await privacy_settings(callback, state, session, **kwargs)
        
    except Exception as e:
        logger.error(f"Error toggling privacy setting: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "export_user_data")
async def export_user_data(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await user_service.export_user_data(user.id)
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        import json
        import tempfile
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2, default=str)
            temp_path = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        file = FSInputFile(temp_path, filename=f"user_data_{user.telegram_id}.json")
        
        caption = (
            f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üóìÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìÅ –í–∫–ª—é—á–∞–µ—Ç:\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫\n"
            f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN\n"
            f"‚Ä¢ –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            f"üîí –î–∞–Ω–Ω—ã–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON"
        )
        
        await callback.message.answer_document(
            document=file,
            caption=caption
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.unlink(temp_path)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        await user_service.log_user_action(
            user_id=user.id,
            action="user_data_exported"
        )
        
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", show_alert=False)
        
    except Exception as e:
        logger.error(f"Error exporting user data: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "delete_user_data")
async def delete_user_data_request(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        text = (
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã:\n"
            "‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ –í—Å–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n\n"
            "üîí –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –ù–ï–¢, –æ—Ç–º–µ–Ω–∞", callback_data="profile_settings"),
                InlineKeyboardButton(text="üóëÔ∏è –î–ê, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_user_data")
            ]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in delete user data request: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm_delete_user_data")
async def confirm_delete_user_data(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer("–£–¥–∞–ª—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º
        await user_service.log_user_action(
            user_id=user.id,
            action="user_data_deletion_requested"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        success = await user_service.delete_user_data(user.id)
        
        if success:
            text = (
                "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã</b>\n\n"
                "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üëã\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start"
            )
            
            keyboard = None
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming delete user data: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "privacy_policy")
async def show_privacy_policy(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        text = (
            "üìÑ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            
            "üîí <b>–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º:</b>\n"
            "‚Ä¢ Telegram ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è VPN\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n"
            "‚Ä¢ –õ–æ–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–±–µ–∑ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)\n\n"
            
            "üõ°Ô∏è <b>–ö–∞–∫ –º—ã –∑–∞—â–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ:</b>\n"
            "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ\n"
            "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏\n"
            "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n\n"
            
            "üìä <b>–ö–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ:</b>\n"
            "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ VPN —É—Å–ª—É–≥\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n\n"
            
            "üö´ <b>–ß—Ç–æ –º—ã –ù–ï –¥–µ–ª–∞–µ–º:</b>\n"
            "‚Ä¢ –ù–µ –ø—Ä–æ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
            "‚Ä¢ –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–µ—â–∞–µ–º—ã–µ —Å–∞–π—Ç—ã\n"
            "‚Ä¢ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
            
            "üìß <b>–°–≤—è–∑—å:</b> @support_bot"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_user_data"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="delete_user_data")
            ],
            [InlineKeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_privacy")]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing privacy policy: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)


@router.callback_query(F.data == "referral_program")
async def show_referral_program(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        referral_stats = await user_service.get_referral_statistics(user.id)
        
        referral_link = f"https://t.me/{callback.bot.username}?start=ref_{user.telegram_id}"
        
        text = (
            "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            
            "üí∞ <b>–ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π!</b>\n\n"
            
            "üéØ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
            "2Ô∏è‚É£ –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É\n"
            "3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 30% —Å –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n"
            "4Ô∏è‚É£ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É\n\n"
            
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats.get('total_referrals', 0)} —á–µ–ª–æ–≤–µ–∫\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {referral_stats.get('active_referrals', 0)} —á–µ–ª–æ–≤–µ–∫\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_stats.get('total_earned', 0)} ‚ÇΩ\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {referral_stats.get('available_balance', 0)} ‚ÇΩ\n\n"
            
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            
            "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—Ö–∞:</b>\n"
            "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö VPN\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–∑—å—è–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="copy_referral_link"),
                InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_referral_link")
            ],
            [
                InlineKeyboardButton(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw_referral_earnings"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_referral_stats")
            ],
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing referral program: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)