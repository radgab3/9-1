"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
from decimal import Decimal
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from bots.client.states.client_states import PaymentStates
from bots.client.keyboards.inline import (
    get_payment_methods_keyboard, get_payment_status_keyboard,
    get_back_button, get_payment_confirmation_keyboard
)
from core.services.payment_service import PaymentService
from core.services.subscription_service import SubscriptionService
from core.services.user_service import UserService
from core.database.repositories import RepositoryManager
from core.database.models import PaymentStatus, PaymentMethod
from core.utils.helpers import format_bytes, mask_sensitive_data
from config.settings import settings

router = Router()


@router.callback_query(F.data.startswith("pay_card_"))
async def initiate_card_payment(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –ÆKassa"""
    try:
        await callback.answer()
        
        plan_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_service = UserService(session)
        payment_service = PaymentService(session)
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
        repos = RepositoryManager(session)
        plan = await repos.subscription_plans.get_by_id(plan_id)
        
        if not plan or not plan.is_active:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        try:
            payment = await payment_service.create_payment(
                user_id=user.id,
                plan_id=plan_id,
                server_id=data.get("selected_server_id"),
                protocol=data.get("selected_protocol"),
                payment_method=PaymentMethod.YOOKASSA,
                amount=plan.price,
                currency=plan.currency
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ÆKassa
            payment_url = await payment_service.get_payment_url(payment.id)
            
            if not payment_url:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_back_button("subscriptions")
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
            text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n"
            text += f"üì¶ –ü–ª–∞–Ω: {plan.name}\n"
            text += f"üí∞ –°—É–º–º–∞: {plan.price} {plan.currency}\n"
            text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {plan.duration_days} –¥–Ω–µ–π\n\n"
            text += f"üîó <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n"
            text += f"<a href='{payment_url}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plan.price} {plan.currency}</a>\n\n"
            text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n"
            text += f"üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url=payment_url)],
                [
                    InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment_{payment.id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment.id}")
                ],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ])
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(payment_id=payment.id)
            await state.set_state(PaymentStates.waiting_payment)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            await user_service.log_user_action(
                user_id=user.id,
                action="payment_initiated",
                details={
                    "payment_id": payment.id,
                    "plan_id": plan_id,
                    "amount": float(plan.price),
                    "currency": plan.currency,
                    "method": "yookassa"
                }
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(monitor_payment_status(payment.id, session))
            
        except Exception as e:
            logger.error(f"Error creating YooKassa payment: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button("subscriptions")
            )
        
    except Exception as e:
        logger.error(f"Error initiating card payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data.startswith("pay_crypto_"))
async def initiate_crypto_payment(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å CryptoPay –ø–ª–∞—Ç–µ–∂"""
    try:
        await callback.answer()
        
        plan_id = int(callback.data.split("_")[2])
        
        # –°–æ–∑–¥–∞–µ–º CryptoPay –ø–ª–∞—Ç–µ–∂
        await create_cryptopay_payment(callback, state, session, plan_id)
        
    except Exception as e:
        logger.error(f"Error initiating CryptoPay payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def create_cryptopay_payment(callback: CallbackQuery, state: FSMContext, session, plan_id: int):
    """–°–æ–∑–¥–∞—Ç—å CryptoPay –ø–ª–∞—Ç–µ–∂"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        user_service = UserService(session)
        payment_service = PaymentService(session)
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        repos = RepositoryManager(session)
        plan = await repos.subscription_plans.get_by_id(plan_id)
        
        if not plan:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RUB –≤ USDT (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 USD = 100 RUB)
            usdt_amount = round(plan.price / 100, 2)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            payment = await payment_service.create_payment(
                user_id=user.id,
                plan_id=plan_id,
                server_id=data.get("selected_server_id"),
                protocol=data.get("selected_protocol"),
                payment_method=PaymentMethod.CRYPTOPAY,
                amount=usdt_amount,
                currency="USDT"
            )
            
            # –°–æ–∑–¥–∞–µ–º CryptoPay –∏–Ω–≤–æ–π—Å
            cryptopay_invoice = await payment_service.create_cryptopay_invoice(
                payment_id=payment.id,
                amount=usdt_amount,
                currency="USDT",
                description=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞: {plan.name}"
            )
            
            if not cryptopay_invoice:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CryptoPay –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_back_button("subscriptions")
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å CryptoPay
            text = f"üíé <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoPay</b>\n\n"
            text += f"üì¶ –ü–ª–∞–Ω: {plan.name}\n"
            text += f"üí∞ –°—É–º–º–∞: {usdt_amount} USDT\n"
            text += f"üí± –ö—É—Ä—Å: {plan.price} RUB ‚âà {usdt_amount} USDT\n\n"
            text += f"üöÄ <b>CryptoPay –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            text += f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä—è–º–æ –≤ Telegram\n"
            text += f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 15+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            text += f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
            text += f"‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n\n"
            text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 1 —á–∞—Å\n"
            text += f"üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoPay
            pay_url = cryptopay_invoice.get("pay_url")
            mini_app_url = cryptopay_invoice.get("mini_app_pay_url")
            
            keyboard_buttons = []
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
            if mini_app_url:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoPay", 
                        url=mini_app_url
                    )
                ])
            elif pay_url:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üíé –û–ø–ª–∞—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", 
                        url=pay_url
                    )
                ])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard_buttons.extend([
                [
                    InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cryptopay_{payment.id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment.id}")
                ],
                [InlineKeyboardButton(text="‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ CryptoPay?", callback_data="cryptopay_info")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                payment_id=payment.id,
                cryptopay_invoice_id=cryptopay_invoice.get("invoice_id"),
                payment_method="cryptopay"
            )
            await state.set_state(PaymentStates.waiting_payment)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            await user_service.log_user_action(
                user_id=user.id,
                action="cryptopay_payment_initiated",
                details={
                    "payment_id": payment.id,
                    "amount": float(usdt_amount),
                    "invoice_id": cryptopay_invoice.get("invoice_id")
                }
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CryptoPay –ø–ª–∞—Ç–µ–∂–∞
            asyncio.create_task(monitor_cryptopay_payment(payment.id, session))
            
        except Exception as e:
            logger.error(f"Error creating CryptoPay payment: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CryptoPay –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button("subscriptions")
            )
        
    except Exception as e:
        logger.error(f"Error in create_cryptopay_payment: {e}")


@router.callback_query(F.data == "cryptopay_info")
async def show_cryptopay_info(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CryptoPay"""
    try:
        await callback.answer()
        
        text = f"üíé <b>–ß—Ç–æ —Ç–∞–∫–æ–µ CryptoPay?</b>\n\n"
        text += f"üöÄ CryptoPay - —ç—Ç–æ —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram.\n\n"
        text += f"‚úÖ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        text += f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –±–µ–∑ –≤—ã—Ö–æ–¥–∞ –∏–∑ Telegram\n"
        text += f"‚Ä¢ 15+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        text += f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
        text += f"‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏\n"
        text += f"‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
        text += f"üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
        text += f"‚Ä¢ USDT, BTC, ETH, TON\n"
        text += f"‚Ä¢ USDC, LTC, BNB, TRX\n"
        text += f"‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ\n\n"
        text += f"üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        text += f"‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω\n"
        text += f"‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
        text += f"‚Ä¢ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="back_to_payment")]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing CryptoPay info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
        
        payment_id = int(callback.data.split("_")[2])
        
        payment_service = PaymentService(session)
        repos = RepositoryManager(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = await repos.payments.get_by_id(payment_id)
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        updated_payment = await payment_service.check_payment_status(payment_id)
        
        if updated_payment.status == PaymentStatus.COMPLETED:
            # –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
            text = "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            text += f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {payment.amount} {payment.currency}\n"
            text += f"üìÖ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {payment.paid_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            text += "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            text += "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="my_configs")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            await state.clear()
            
        elif updated_payment.status == PaymentStatus.FAILED:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª
            text = "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
            text += "‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–Ω–∫–æ–º\n"
            text += "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            text += "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ–π\n"
            text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
            text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscriptions")],
                [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            await state.clear()
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            expires_in = ""
            if payment.expires_at:
                time_left = payment.expires_at - datetime.utcnow()
                if time_left.total_seconds() > 0:
                    minutes_left = int(time_left.total_seconds() / 60)
                    expires_in = f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes_left} –º–∏–Ω—É—Ç"
                else:
                    expires_in = "\n‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ"
            
            text = f"üîÑ <b>–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            text += f"üí∞ –°—É–º–º–∞: {payment.amount} {payment.currency}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}"
            text += expires_in
            text += f"\n\nüí° –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥–µ—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = get_payment_status_keyboard(payment_id, payment.payment_method)
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error checking payment status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("check_cryptopay_"))
async def check_cryptopay_payment(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CryptoPay –ø–ª–∞—Ç–µ–∂"""
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å CryptoPay...")
        
        payment_id = int(callback.data.split("_")[2])
        
        payment_service = PaymentService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ CryptoPay
        result = await payment_service.check_cryptopay_status(payment_id)
        
        if result["status"] == "paid":
            await callback.answer("‚úÖ CryptoPay –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω! –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É...", show_alert=True)
            # –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        elif result["status"] == "active":
            await callback.answer(
                "üîÑ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoPay",
                show_alert=True
            )
        else:
            await callback.answer(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"Error checking CryptoPay payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CryptoPay", show_alert=True)
        
        payment_service = PaymentService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        result = await payment_service.check_crypto_transaction(payment_id)
        
        if result["status"] == "confirmed":
            await callback.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É...", show_alert=True)
            # –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        elif result["status"] == "pending":
            confirmations = result.get("confirmations", 0)
            required = result.get("required_confirmations", 3)
            
            await callback.answer(
                f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {confirmations}/{required}",
                show_alert=True
            )
        else:
            await callback.answer(
                "‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"Error checking crypto payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("cancel_payment_"))
async def cancel_payment(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"""
    try:
        await callback.answer()
        
        payment_id = int(callback.data.split("_")[2])
        
        payment_service = PaymentService(session)
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        success = await payment_service.cancel_payment(payment_id)
        
        if success:
            text = "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Ç–∞—Ä–∏—Ñ."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="subscriptions")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            await state.clear()
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error canceling payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data.startswith("copy_address_"))
async def copy_wallet_address(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        payment_id = int(callback.data.split("_")[2])
        
        data = await state.get_data()
        wallet_address = data.get("wallet_address")
        
        if wallet_address:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.answer(
                f"üìã <b>–ê–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n<code>{wallet_address}</code>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂—É", callback_data=f"check_crypto_{payment_id}")]
                ])
            )
            await callback.answer("üìã –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", show_alert=False)
        else:
            await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error copying address: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("crypto_instruction_"))
async def show_crypto_instruction(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º"""
    try:
        await callback.answer()
        
        currency = callback.data.split("_")[2]
        
        instructions = {
            "BTC": {
                "name": "Bitcoin",
                "apps": ["Electrum", "Bitcoin Core", "Trust Wallet", "Coinbase"],
                "network": "Bitcoin Network",
                "time": "10-60 –º–∏–Ω—É—Ç"
            },
            "ETH": {
                "name": "Ethereum", 
                "apps": ["MetaMask", "Trust Wallet", "Coinbase", "MyEtherWallet"],
                "network": "Ethereum Network (ERC-20)",
                "time": "5-15 –º–∏–Ω—É—Ç"
            },
            "USDT": {
                "name": "Tether",
                "apps": ["Trust Wallet", "MetaMask", "Coinbase", "Binance"],
                "network": "Ethereum Network (ERC-20)",
                "time": "5-15 –º–∏–Ω—É—Ç"
            }
        }
        
        info = instructions.get(currency, instructions["BTC"])
        
        text = f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ {info['name']}</b>\n\n"
        text += f"üí≥ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>\n"
        for app in info['apps']:
            text += f"‚Ä¢ {app}\n"
        text += f"\nüåê <b>–°–µ—Ç—å:</b> {info['network']}\n"
        text += f"‚è∞ <b>–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> {info['time']}\n\n"
        text += f"üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        text += f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫\n"
        text += f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ 'Send'\n"
        text += f"3. –í—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        text += f"4. –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
        text += f"5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n"
        text += f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å\n"
        text += f"‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å –±–∏—Ä–∂–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="back_to_payment")]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing crypto instruction: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", show_alert=True)


# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–µ–π

async def monitor_payment_status(payment_id: int, session):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa"""
    try:
        payment_service = PaymentService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        for _ in range(30):  # 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 30 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç
            await asyncio.sleep(30)
            
            payment = await payment_service.check_payment_status(payment_id)
            
            if payment.status in [PaymentStatus.COMPLETED, PaymentStatus.FAILED]:
                # –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await notify_payment_status_change(payment, session)
                break
                
    except Exception as e:
        logger.error(f"Error monitoring payment {payment_id}: {e}")


async def monitor_cryptopay_payment(payment_id: int, session):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CryptoPay –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_service = PaymentService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
        for _ in range(60):  # 60 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 1 –º–∏–Ω—É—Ç–µ = 1 —á–∞—Å
            await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
            
            result = await payment_service.check_cryptopay_status(payment_id)
            
            if result["status"] == "paid":
                # CryptoPay –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
                payment = await payment_service.complete_payment(payment_id)
                await notify_payment_status_change(payment, session)
                break
            elif result["status"] == "expired":
                # –ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫
                await payment_service.expire_payment(payment_id)
                break
                
    except Exception as e:
        logger.error(f"Error monitoring CryptoPay payment {payment_id}: {e}")


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ USDT
# async def monitor_usdt_payment() - —É–±—Ä–∞–Ω–∞


async def notify_payment_status_change(payment, session):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.info(f"Payment {payment.id} status changed to {payment.status}")
        
    except Exception as e:
        logger.error(f"Error notifying payment status change: {e}")