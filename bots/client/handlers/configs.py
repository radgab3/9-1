"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ (–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import os
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from bots.client.states.client_states import ConfigStates
from bots.client.keyboards.inline import (
    get_configs_keyboard, get_config_actions_keyboard, 
    get_back_button, get_protocols_keyboard
)
from core.services.subscription_service import SubscriptionService
from core.services.user_service import UserService
from core.services.vpn.vpn_factory import VpnServiceManager
from core.database.repositories import RepositoryManager

router = Router()


@router.callback_query(F.data == "my_configs")
async def show_my_configs(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        repos = RepositoryManager(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_service = SubscriptionService(session)
        active_subscription = await subscription_service.get_active_subscription(user.id)
        
        if not active_subscription:
            text = (
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "üî∏ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
                "üî∏ –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial_period")],
                [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        configs = await repos.vpn_configs.get_by_subscription(active_subscription.id)
        
        if not configs:
            text = (
                "‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–°–æ–∑–¥–∞–µ–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            await callback.message.edit_text(text=text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            vpn_manager = VpnServiceManager(session)
            try:
                config = await vpn_manager.create_config_for_best_protocol(
                    server=active_subscription.server,
                    subscription_id=active_subscription.id,
                    preferred_protocol=active_subscription.active_protocol
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                configs = [config]
                
            except Exception as e:
                logger.error(f"Error creating config: {e}")
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_back_button("main_menu")
                )
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        text = "‚öôÔ∏è <b>–í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n\n"
        
        for config in configs:
            status_emoji = "‚úÖ" if config.is_active else "‚ùå"
            protocol_emoji = {
                "vless": "üî•",
                "vmess": "üíô", 
                "trojan": "üíú",
                "openvpn": "üõ°Ô∏è", 
                "wireguard": "‚ö°"
            }.get(config.protocol.value, "üîß")
            
            text += f"{status_emoji} {protocol_emoji} <b>{config.protocol.value.upper()}</b>\n"
            text += f"üåç {config.server.name} ({config.server.country})\n"
            
            if config.last_used:
                text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {config.last_used.strftime('%d.%m.%Y')}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
            if config.total_traffic_gb > 0:
                text += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {config.total_traffic_gb:.2f} –ì–ë\n"
            
            text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        expires_at = active_subscription.expires_at
        if expires_at:
            days_left = (expires_at - datetime.utcnow()).days
            if days_left > 0:
                text += f"‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π</b>\n\n"
            else:
                text += f"‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_configs_keyboard(configs)
        )
        
        await state.set_state(ConfigStates.viewing_configs)
        
    except Exception as e:
        logger.error(f"Error showing configs: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("config_"))
async def show_config_details(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if config.subscription.user_id != user.id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        status_emoji = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if config.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        protocol_emoji = {
            "vless": "üî•",
            "vmess": "üíô",
            "trojan": "üíú", 
            "openvpn": "üõ°Ô∏è", 
            "wireguard": "‚ö°"
        }.get(config.protocol.value, "üîß")
        
        text = f"{protocol_emoji} <b>{config.protocol.value.upper()} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>\n\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
        text += f"üåç –°–µ—Ä–≤–µ—Ä: {config.server.name}\n"
        text += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {config.server.country}, {config.server.city}\n"
        text += f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {config.client_id}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if config.total_traffic_gb > 0:
            text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {config.total_traffic_gb:.2f} –ì–ë\n"
        else:
            text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: 0 –ì–ë\n"
        
        if config.last_used:
            text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {config.last_used.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += f"üïê –ï—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription = config.subscription
        if subscription.expires_at:
            days_left = (subscription.expires_at - datetime.utcnow()).days
            if days_left > 0:
                text += f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞: {days_left} –¥–Ω–µ–π\n"
            else:
                text += f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n"
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_config_actions_keyboard(config_id)
        )
        
        await state.update_data(current_config_id=config_id)
        
    except Exception as e:
        logger.error(f"Error showing config details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("download_"))
async def download_config(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª...")
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config or not config.is_active:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if config.subscription.user_id != user.id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extensions = {
            "vless": ".txt",
            "vmess": ".txt",
            "trojan": ".txt",
            "openvpn": ".ovpn",
            "wireguard": ".conf"
        }
        
        extension = file_extensions.get(config.protocol.value, ".txt")
        filename = f"{config.protocol.value}_config_{config.id}{extension}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = "/tmp/vpn_configs"
        os.makedirs(temp_dir, exist_ok=True)
        temp_path = os.path.join(temp_dir, filename)
        
        with open(temp_path, 'w', encoding='utf-8') as f:
            f.write(config.connection_string)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = FSInputFile(temp_path, filename=filename)
        
        caption = (
            f"üìÅ <b>{config.protocol.value.upper()} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>\n"
            f"üåç –°–µ—Ä–≤–µ—Ä: {config.server.name}\n"
            f"üìç {config.server.country}, {config.server.city}\n\n"
            f"üì± –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        )
        
        await callback.message.answer_document(
            document=file,
            caption=caption
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(temp_path)
        except:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await user_service.log_user_action(
            user_id=user.id,
            action="config_downloaded",
            details={
                "config_id": config_id,
                "protocol": config.protocol.value,
                "server": config.server.name
            }
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await repos.vpn_configs.update(config_id, last_used=datetime.utcnow())
        await repos.commit()
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"Error downloading config: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


@router.callback_query(F.data.startswith("qr_"))
async def show_qr_code(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥...")
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config or not config.is_active:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        if config.subscription.user_id != user.id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR –∫–æ–¥–∞
        if not config.qr_code_path or not os.path.exists(config.qr_code_path):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            from core.utils.qr_generator import generate_config_qr
            
            qr_path = await generate_config_qr(
                connection_string=config.connection_string,
                config_id=config.id,
                protocol=config.protocol.value
            )
            
            if qr_path:
                await repos.vpn_configs.update(config_id, qr_code_path=qr_path)
                await repos.commit()
                config.qr_code_path = qr_path
        
        if config.qr_code_path and os.path.exists(config.qr_code_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥
            qr_file = FSInputFile(config.qr_code_path)
            
            caption = (
                f"üì∑ <b>QR –∫–æ–¥ –¥–ª—è {config.protocol.value.upper()}</b>\n"
                f"üåç –°–µ—Ä–≤–µ—Ä: {config.server.name}\n"
                f"üìç {config.server.country}, {config.server.city}\n\n"
                f"üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:\n"
                f"‚Ä¢ V2rayNG (Android)\n"
                f"‚Ä¢ V2Box (iOS)\n"
                f"‚Ä¢ OpenVPN Connect\n"
                f"‚Ä¢ WireGuard"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"instruction_{config_id}"),
                    InlineKeyboardButton(text="üì± –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"download_{config_id}")
                ],
                [InlineKeyboardButton(text="üîô –ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data=f"config_{config_id}")]
            ])
            
            await callback.message.answer_photo(
                photo=qr_file,
                caption=caption,
                reply_markup=keyboard
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä QR –∫–æ–¥–∞
            await user_service.log_user_action(
                user_id=user.id,
                action="qr_code_viewed",
                details={
                    "config_id": config_id,
                    "protocol": config.protocol.value
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await repos.vpn_configs.update(config_id, last_used=datetime.utcnow())
            await repos.commit()
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error showing QR code: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR –∫–æ–¥–∞", show_alert=True)


@router.callback_query(F.data.startswith("instruction_"))
async def show_instruction(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    try:
        await callback.answer()
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        protocol = config.protocol.value
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        instructions = {
            "vless": [
                "üì± –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG (Android) –∏–ª–∏ V2Box (iOS)",
                "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ QR –∫–æ–¥ –∏–ª–∏ —Ñ–∞–π–ª",
                "üîå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ 2ip.ru"
            ],
            "vmess": [
                "üì± –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG (Android) –∏–ª–∏ V2Box (iOS)",
                "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ VMess –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ QR –∫–æ–¥",
                "üîå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            ],
            "trojan": [
                "üì± –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–ª–∏ Clash",
                "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Trojan –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            ],
            "openvpn": [
                "üì± –°–∫–∞—á–∞–π—Ç–µ OpenVPN Connect –∏–∑ App Store/Google Play",
                "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .ovpn —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "üîå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "üîê –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            ],
            "wireguard": [
                "üì± –°–∫–∞—á–∞–π—Ç–µ WireGuard –∏–∑ App Store/Google Play",
                "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ QR –∫–æ–¥ –∏–ª–∏ —Ñ–∞–π–ª",
                "üîå –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            ]
        }
        
        protocol_instructions = instructions.get(protocol, [
            "üì± –°–∫–∞—á–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN"
        ])
        
        text = f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è {protocol.upper()}</b>\n\n"
        
        for i, step in enumerate(protocol_instructions, 1):
            text += f"{i}. {step}\n"
        
        text += f"\nüåç <b>–°–µ—Ä–≤–µ—Ä:</b> {config.server.name}\n"
        text += f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {config.server.country}\n\n"
        text += "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n"
        text += "‚Ä¢ 2ip.ru - –ø—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞\n"
        text += "‚Ä¢ speedtest.net - —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n"
        text += "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        
        # –ö–Ω–æ–ø–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"download_{config_id}"),
                InlineKeyboardButton(text="üì∑ QR –∫–æ–¥", callback_data=f"qr_{config_id}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{config_id}"),
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data=f"test_{config_id}")
            ],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data=f"config_{config_id}")]
        ])
        
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing instruction: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("refresh_"))
async def refresh_config(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º VPN —Å–µ—Ä–≤–∏—Å
        vpn_manager = VpnServiceManager(session)
        vpn_service = vpn_manager.get_service(config.protocol, config.server)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        usage_stats = await vpn_service.get_usage_stats(config_id)
        
        if usage_stats:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ
            await repos.vpn_configs.update_usage(
                config_id, 
                usage_stats.get("total_gb", 0)
            )
            await repos.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await show_config_details(callback, state, session, **kwargs)
        
        await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=False)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        await user_service.log_user_action(
            user_id=user.id,
            action="config_refreshed",
            details={"config_id": config_id}
        )
        
    except Exception as e:
        logger.error(f"Error refreshing config: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("test_"))
async def test_config_connection(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        
        config_id = int(callback.data.split("_")[1])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º VPN —Å–µ—Ä–≤–∏—Å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        vpn_manager = VpnServiceManager(session)
        vpn_service = vpn_manager.get_service(config.protocol, config.server)
        
        connection_ok = await vpn_service.test_connection(config_id)
        
        if connection_ok:
            test_result = "‚úÖ <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n"
            test_result += f"üåç –°–µ—Ä–≤–µ—Ä {config.server.name} –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            test_result += f"üîê –ü—Ä–æ—Ç–æ–∫–æ–ª {config.protocol.value.upper()} —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç\n"
            test_result += f"üì° –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        else:
            test_result = "‚ùå <b>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º</b>\n\n"
            test_result += f"üåç –°–µ—Ä–≤–µ—Ä {config.server.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            test_result += f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            test_result += f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
            test_result += f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
            test_result += f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º\n\n"
            test_result += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"test_{config_id}"),
                InlineKeyboardButton(text="üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data=f"config_{config_id}")]
        ])
        
        await callback.message.edit_text(
            text=test_result,
            reply_markup=keyboard
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        await user_service.log_user_action(
            user_id=user.id,
            action="config_tested",
            details={
                "config_id": config_id,
                "test_result": "success" if connection_ok else "failed"
            }
        )
        
    except Exception as e:
        logger.error(f"Error testing config connection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("delete_config_"))
async def delete_config_request(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        config_id = int(callback.data.split("_")[2])
        
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        text = (
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?\n\n"
            f"üîê –ü—Ä–æ—Ç–æ–∫–æ–ª: {config.protocol.value.upper()}\n"
            f"üåç –°–µ—Ä–≤–µ—Ä: {config.server.name}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{config_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"config_{config_id}")
            ]
        ])
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in delete config request: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_config(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer("–£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        config_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º VPN —Å–µ—Ä–≤–∏—Å –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        repos = RepositoryManager(session)
        config = await repos.vpn_configs.get_by_id(config_id)
        
        if not config:
            await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        vpn_manager = VpnServiceManager(session)
        vpn_service = vpn_manager.get_service(config.protocol, config.server)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        success = await vpn_service.delete_config(config_id)
        
        if success:
            text = (
                "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b