"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from bots.client.states.client_states import SubscriptionStates, TrialStates
from bots.client.keyboards.inline import (
    get_subscription_plans_keyboard, get_servers_keyboard, 
    get_protocols_keyboard, get_payment_methods_keyboard,
    get_confirmation_keyboard, get_trial_keyboard, get_back_button
)
from core.services.subscription_service import SubscriptionService, SubscriptionPlanService
from core.services.server_service import ServerService
from core.services.user_service import UserService
from core.services.vpn.vpn_factory import VpnServiceManager
from core.database.models import VpnProtocol

router = Router()


@router.callback_query(F.data == "subscriptions")
@router.callback_query(F.data == "buy_subscription")
async def show_subscription_plans(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    try:
        await callback.answer()
        
        plan_service = SubscriptionPlanService(session)
        plans = await plan_service.get_all_plans()
        
        if not plans:
            await callback.message.edit_text(
                "‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=get_back_button()
            )
            return
        
        text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>\n\n"
        
        for plan in plans:
            emoji = "‚≠ê" if plan.is_popular else "üì¶"
            
            text += f"{emoji} <b>{plan.name}</b>\n"
            text += f"üí∞ {plan.price} {plan.currency}\n"
            text += f"üìÖ {plan.duration_days} –¥–Ω–µ–π\n"
            
            if plan.traffic_limit_gb:
                text += f"üìä {plan.traffic_limit_gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            else:
                text += "üìä –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
                
            text += f"üì± {plan.device_limit} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_subscription_plans_keyboard(plans)
        )
        
        await state.set_state(SubscriptionStates.selecting_plan)
        
    except Exception as e:
        logger.error(f"Error showing subscription plans: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("plan_"))
async def select_plan(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        await callback.answer()
        
        plan_id = int(callback.data.split("_")[1])
        
        plan_service = SubscriptionPlanService(session)
        plan = await plan_service.get_plan_by_id(plan_id)
        
        if not plan:
            await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        await state.update_data(selected_plan_id=plan_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        text = f"üì¶ <b>{plan.name}</b>\n\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan.price} {plan.currency}\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {plan.duration_days} –¥–Ω–µ–π\n"
        
        if plan.traffic_limit_gb:
            text += f"üìä –¢—Ä–∞—Ñ–∏–∫: {plan.traffic_limit_gb} –ì–ë\n"
        else:
            text += "üìä –¢—Ä–∞—Ñ–∏–∫: –ë–µ–∑–ª–∏–º–∏—Ç\n"
            
        text += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {plan.device_limit}\n\n"
        text += f"üìù {plan.description}\n\n"
        text += "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        server_service = ServerService(session)
        servers = await server_service.get_all_servers()
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_servers_keyboard(servers)
        )
        
        await state.set_state(SubscriptionStates.selecting_server)
        
    except Exception as e:
        logger.error(f"Error selecting plan: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞", show_alert=True)


@router.callback_query(F.data.startswith("server_"))
async def select_server(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        await callback.answer()
        
        server_id = int(callback.data.split("_")[1])
        
        server_service = ServerService(session)
        server = await server_service.get_server_by_id(server_id)
        
        if not server or not server.is_active:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        await state.update_data(selected_server_id=server_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
        text = f"üåç <b>–°–µ—Ä–≤–µ—Ä: {server.name}</b>\n"
        text += f"üìç {server.country}, {server.city}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ VPN –ø—Ä–æ—Ç–æ–∫–æ–ª:"
        
        protocols = server.supported_protocols
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_protocols_keyboard(protocols)
        )
        
        await state.set_state(SubscriptionStates.selecting_protocol)
        
    except Exception as e:
        logger.error(f"Error selecting server: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)


@router.callback_query(F.data.startswith("protocol_"))
async def select_protocol(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        await callback.answer()
        
        protocol = callback.data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        await state.update_data(selected_protocol=protocol)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        plan_id = data.get("selected_plan_id")
        server_id = data.get("selected_server_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        plan_service = SubscriptionPlanService(session)
        server_service = ServerService(session)
        
        plan = await plan_service.get_plan_by_id(plan_id)
        server = await server_service.get_server_by_id(server_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
        text = "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        text += f"üì¶ –ü–ª–∞–Ω: {plan.name}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan.price} {plan.currency}\n"
        text += f"üåç –°–µ—Ä–≤–µ—Ä: {server.name} ({server.country})\n"
        text += f"üîê –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol.upper()}\n\n"
        text += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_confirmation_keyboard("order", plan_id)
        )
        
        await state.set_state(SubscriptionStates.confirming_purchase)
        
    except Exception as e:
        logger.error(f"Error selecting protocol: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", show_alert=True)


@router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        await callback.answer()
        
        plan_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        server_id = data.get("selected_server_id")
        protocol = data.get("selected_protocol")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        text = "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        text += "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)\n"
        text += "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (BTC, ETH, USDT)\n\n"
        text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_payment_methods_keyboard(plan_id)
        )
        
        await state.set_state(SubscriptionStates.waiting_for_payment)
        
    except Exception as e:
        logger.error(f"Error confirming order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "trial_period")
async def show_trial_offer(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        subscription_service = SubscriptionService(session)
        user_subscriptions = await subscription_service.get_user_subscriptions(user.id)
        
        trial_used = any(sub.plan.is_trial for sub in user_subscriptions)
        
        if trial_used:
            text = (
                "‚ùå <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:"
            )
            
            plan_service = SubscriptionPlanService(session)
            plans = await plan_service.get_all_plans()
            non_trial_plans = [p for p in plans if not p.is_trial]
            
            await callback.message.edit_text(
                text=text,
                reply_markup=get_subscription_plans_keyboard(non_trial_plans)
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        plan_service = SubscriptionPlanService(session)
        trial_plan = await plan_service.get_trial_plan()
        
        if not trial_plan:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_back_button()
            )
            return
        
        text = f"üÜì <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n"
        text += f"üìÖ –°—Ä–æ–∫: {trial_plan.duration_days} –¥–Ω–µ–π\n"
        text += f"üìä –¢—Ä–∞—Ñ–∏–∫: {trial_plan.traffic_limit_gb} –ì–ë\n"
        text += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {trial_plan.device_limit}\n"
        text += f"üåç –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º\n\n"
        text += "‚ú® –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        text += "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É."
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_trial_keyboard()
        )
        
        await state.set_state(TrialStates.requesting_trial)
        
    except Exception as e:
        logger.error(f"Error showing trial offer: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)


@router.callback_query(F.data == "activate_trial")
async def activate_trial(callback: CallbackQuery, state: FSMContext, session, **kwargs):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        await callback.answer()
        
        user_service = UserService(session)
        subscription_service = SubscriptionService(session)
        plan_service = SubscriptionPlanService(session)
        server_service = ServerService(session)
        
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω
        trial_plan = await plan_service.get_trial_plan()
        if not trial_plan:
            await callback.answer("‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä
        best_server = await server_service.get_best_server_for_user(user)
        if not best_server:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await subscription_service.create_subscription(
            user_id=user.id,
            plan_id=trial_plan.id,
            server_id=best_server.id,
            protocol=VpnProtocol.VLESS  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é VLESS –¥–ª—è –†–§ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await subscription_service.activate_subscription(subscription.id)
        
        # –°–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        vpn_manager = VpnServiceManager(session)
        config = await vpn_manager.create_config_for_best_protocol(
            server=best_server,
            subscription_id=subscription.id,
            preferred_protocol=VpnProtocol.VLESS
        )
        
        success_text = (
            "üéâ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç: {trial_plan.duration_days} –¥–Ω–µ–π\n"
            f"üåç –°–µ—Ä–≤–µ—Ä: {best_server.name}\n"
            f"üîê –ü—Ä–æ—Ç–æ–∫–æ–ª: {config.protocol.value.upper()}\n\n"
            "‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        )
        
        from bots.client.keyboards.inline import get_config_actions_keyboard
        
        await callback.message.edit_text(
            text=success_text,
            reply_markup=get_config_actions_keyboard(config.id)
        )
        
        await state.clear()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        await user_service.log_user_action(
            user_id=user.id,
            action="trial_activated",
            details={
                "subscription_id": subscription.id,
                "server_id": best_server.id,
                "protocol": config.protocol.value
            }
        )
        
    except Exception as e:
        logger.error(f"Error activating trial: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await callback.answer()
        
        from bots.client.handlers.start import show_main_menu
        from core.services.user_service import UserService
        
        user_service = UserService(callback.bot.session)
        user = await user_service.get_user_by_telegram_id(callback.from_user.id)
        
        await show_main_menu(callback.message, user, state)
        
    except Exception as e:
        logger.error(f"Error canceling action: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)