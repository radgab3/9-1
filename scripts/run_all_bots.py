#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ VPN Bot System
"""

import asyncio
import signal
import sys
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from loguru import logger
from config.settings import settings
from config.database import init_database, init_redis, close_connections


class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.tasks: List[asyncio.Task] = []
        self.shutdown_event = asyncio.Event()
    
    async def start_client_bot(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
        try:
            from bots.client.main import main as client_main
            logger.info("ü§ñ Starting Client Bot...")
            await client_main()
        except Exception as e:
            logger.error(f"‚ùå Client Bot error: {e}")
            raise
    
    async def start_support_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            from bots.support.main import main as support_main
            logger.info("üéß Starting Support Bot...")
            await support_main()
        except Exception as e:
            logger.error(f"‚ùå Support Bot error: {e}")
            raise
    
    async def start_admin_bot(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
        try:
            from bots.admin.main import main as admin_main
            logger.info("üëë Starting Admin Bot...")
            await admin_main()
        except Exception as e:
            logger.error(f"‚ùå Admin Bot error: {e}")
            raise
    
    async def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import uvicorn
            from api.main import app
            
            logger.info("üåê Starting API Server...")
            
            config = uvicorn.Config(
                app,
                host=settings.API_HOST,
                port=settings.API_PORT,
                log_level="info",
                access_log=True
            )
            
            server = uvicorn.Server(config)
            await server.serve()
            
        except Exception as e:
            logger.error(f"‚ùå API Server error: {e}")
            raise
    
    async def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info("‚öôÔ∏è Starting background tasks...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:
            # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            # - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
            # - –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            # - Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
            while not self.shutdown_event.is_set():
                # –ü—Ä–∏–º–µ—Ä —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                await self.check_expiring_subscriptions()
                await self.update_server_stats()
                
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                try:
                    await asyncio.wait_for(
                        self.shutdown_event.wait(),
                        timeout=3600
                    )
                    break
                except asyncio.TimeoutError:
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå Background tasks error: {e}")
            raise
    
    async def check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            from config.database import get_db
            from core.services.subscription_service import SubscriptionNotificationService
            
            async for session in get_db():
                notification_service = SubscriptionNotificationService(session)
                notifications = await notification_service.check_expiring_subscriptions()
                
                for notification in notifications:
                    await notification_service.send_expiry_notification(notification)
                
                logger.debug(f"Checked expiring subscriptions: {len(notifications)} notifications sent")
                break
                
        except Exception as e:
            logger.error(f"Error checking expiring subscriptions: {e}")
    
    async def update_server_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            from config.database import get_db
            from core.services.server_service import ServerService
            
            async for session in get_db():
                server_service = ServerService(session)
                await server_service.update_all_server_stats()
                logger.debug("Updated server stats")
                break
                
        except Exception as e:
            logger.error(f"Error updating server stats: {e}")
    
    async def start_all_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üöÄ Starting VPN Bot System...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
            await init_database()
            await init_redis()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            tasks = []
            
            # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç
            if settings.CLIENT_BOT_TOKEN:
                task = asyncio.create_task(self.start_client_bot())
                task.set_name("client_bot")
                tasks.append(task)
            
            # –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if settings.SUPPORT_BOT_TOKEN:
                task = asyncio.create_task(self.start_support_bot())
                task.set_name("support_bot")
                tasks.append(task)
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç
            if settings.ADMIN_BOT_TOKEN:
                task = asyncio.create_task(self.start_admin_bot())
                task.set_name("admin_bot")
                tasks.append(task)
            
            # API —Å–µ—Ä–≤–µ—Ä
            task = asyncio.create_task(self.start_api_server())
            task.set_name("api_server")
            tasks.append(task)
            
            # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            task = asyncio.create_task(self.start_background_tasks())
            task.set_name("background_tasks")
            tasks.append(task)
            
            self.tasks = tasks
            
            logger.info(f"‚úÖ Started {len(tasks)} services")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"‚ùå Error starting services: {e}")
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë Shutting down VPN Bot System...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.shutdown_event.set()
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            if not task.done():
                task.cancel()
                logger.info(f"Cancelled task: {task.get_name()}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self.tasks:
            await asyncio.gather(*self.tasks, return_exceptions=True)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await close_connections()
        
        logger.info("‚úÖ Shutdown completed")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤
bot_manager: Optional[BotManager] = None


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def signal_handler(signum, frame):
        logger.info(f"Received signal {signum}")
        if bot_manager:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(bot_manager.shutdown())
            loop.close()
        sys.exit(0)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è SIGINT (Ctrl+C) –∏ SIGTERM
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        level=settings.LOG_LEVEL,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True
    )
    
    # –§–∞–π–ª –ª–æ–≥–æ–≤
    logger.add(
        "logs/vpn_bot_system.log",
        level=settings.LOG_LEVEL,
        format=settings.LOG_FORMAT,
        rotation=settings.LOG_ROTATION,
        retention=settings.LOG_RETENTION,
        compression="zip"
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—à–∏–±–æ–∫
    logger.add(
        "logs/errors.log",
        level="ERROR",
        format=settings.LOG_FORMAT,
        rotation="1 week",
        retention="1 month"
    )
    
    logger.info("üìù Logging configured")


async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from config.database import check_database_connection
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db_ok = await check_database_connection()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        redis_ok = True  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis
        
        if db_ok and redis_ok:
            logger.info("‚úÖ Health check passed")
            return True
        else:
            logger.error("‚ùå Health check failed")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Health check error: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_manager
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        logger.info("üöÄ VPN Bot System Starting...")
        logger.info(f"Environment: {settings.ENVIRONMENT}")
        logger.info(f"Debug mode: {settings.DEBUG}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        if not await health_check():
            logger.error("System health check failed, exiting...")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤
        bot_manager = BotManager()
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        await bot_manager.start_all_services()
        
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        sys.exit(1)
    finally:
        if bot_manager:
            await bot_manager.shutdown()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 8):
        logger.error("Python 3.8+ required")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["CLIENT_BOT_TOKEN", "SUPPORT_BOT_TOKEN", "ADMIN_BOT_TOKEN"]
    missing_vars = [var for var in required_vars if not getattr(settings, var, None)]
    
    if missing_vars:
        logger.warning(f"Missing environment variables: {missing_vars}")
        logger.info("Some bots may not start due to missing tokens")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    Path("logs").mkdir(exist_ok=True)
    Path("static").mkdir(exist_ok=True)
    Path("static/qr_codes").mkdir(exist_ok=True)
    Path("static/configs").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã VPN Bot System stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")
        sys.exit(1)