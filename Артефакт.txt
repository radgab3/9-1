# Обновленная архитектура VPN Bot System

## 🏗️ Полная структура проекта

```
vpn_bot_system/
├── .env
├── requirements.txt
├── docker-compose.yml
├── README.md
├── alembic.ini
├── config/
│   ├── __init__.py
│   ├── settings.py
│   └── database.py
├── core/
│   ├── __init__.py
│   ├── database/
│   │   ├── __init__.py
│   │   ├── models.py
│   │   ├── repositories.py
│   │   └── migrations/
│   │       ├── env.py
│   │       ├── script.py.mako
│   │       └── versions/
│   ├── services/
│   │   ├── __init__.py
│   │   ├── user_service.py
│   │   ├── subscription_service.py
│   │   ├── server_service.py
│   │   ├── support_service.py
│   │   ├── notification_service.py
│   │   ├── payment_service.py
│   │   ├── analytics_service.py
│   │   └── vpn/
│   │       ├── __init__.py
│   │       ├── base_vpn_service.py
│   │       ├── vpn_factory.py
│   │       ├── vless/
│   │       │   ├── __init__.py
│   │       │   ├── vless_service.py
│   │       │   └── x3ui_service.py
│   │       ├── openvpn/
│   │       │   ├── __init__.py
│   │       │   ├── openvpn_service.py
│   │       │   └── certificate_service.py
│   │       └── wireguard/
│   │           ├── __init__.py
│   │           ├── wireguard_service.py
│   │           └── key_service.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── decorators.py
│   │   ├── validators.py
│   │   ├── helpers.py
│   │   ├── crypto.py
│   │   └── qr_generator.py
│   └── exceptions/
│       ├── __init__.py
│       ├── custom_exceptions.py
│       ├── vpn_exceptions.py
│       └── payment_exceptions.py
├── bots/
│   ├── __init__.py
│   ├── shared/
│   │   ├── __init__.py
│   │   ├── middleware/
│   │   │   ├── __init__.py
│   │   │   ├── database.py
│   │   │   └── logging.py
│   │   └── utils/
│   │       ├── __init__.py
│   │       ├── formatters.py
│   │       └── keyboards_common.py
│   ├── client/
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── handlers/
│   │   │   ├── __init__.py
│   │   │   ├── start.py
│   │   │   ├── subscription.py
│   │   │   ├── profile.py
│   │   │   ├── servers.py
│   │   │   ├── support.py
│   │   │   ├── payment.py
│   │   │   └── configs.py
│   │   ├── keyboards/
│   │   │   ├── __init__.py
│   │   │   ├── inline.py
│   │   │   └── reply.py
│   │   ├── states/
│   │   │   ├── __init__.py
│   │   │   ├── client_states.py
│   │   │   └── payment_states.py
│   │   └── middleware/
│   │       ├── __init__.py
│   │       ├── auth.py
│   │       ├── subscription.py
│   │       └── throttling.py
│   ├── support/
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── handlers/
│   │   │   ├── __init__.py
│   │   │   ├── tickets.py
│   │   │   ├── admin_commands.py
│   │   │   └── topic_management.py
│   │   ├── keyboards/
│   │   │   ├── __init__.py
│   │   │   └── inline.py
│   │   ├── states/
│   │   │   ├── __init__.py
│   │   │   └── support_states.py
│   │   └── middleware/
│   │       ├── __init__.py
│   │       ├── auth.py
│   │       └── ticket_middleware.py
│   └── admin/
│       ├── __init__.py
│       ├── main.py
│       ├── handlers/
│       │   ├── __init__.py
│       │   ├── dashboard.py
│       │   ├── users.py
│       │   ├── servers.py
│       │   ├── subscriptions.py
│       │   ├── support.py
│       │   ├── broadcast.py
│       │   ├── analytics.py
│       │   └── settings.py
│       ├── keyboards/
│       │   ├── __init__.py
│       │   ├── inline.py
│       │   └── pagination.py
│       ├── states/
│       │   ├── __init__.py
│       │   ├── admin_states.py
│       │   ├── server_states.py
│       │   └── broadcast_states.py
│       └── middleware/
│           ├── __init__.py
│           ├── admin_auth.py
│           └── logging.py
├── api/
│   ├── __init__.py
│   ├── webhooks/
│   │   ├── __init__.py
│   │   ├── payment_webhooks.py
│   │   └── server_webhooks.py
│   └── external/
│       ├── __init__.py
│       ├── payment_providers/
│       │   ├── __init__.py
│       │   ├── yookassa.py
│       │   └── crypto_payments.py
│       └── vpn_panels/
│           ├── __init__.py
│           ├── x3ui_api.py
│           └── marzban_api.py
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   ├── test_models/
│   ├── test_services/
│   ├── test_repositories/
│   ├── test_handlers/
│   └── test_vpn/
├── static/
│   ├── images/
│   ├── configs/
│   └── qr_codes/
├── logs/
└── scripts/
    ├── __init__.py
    ├── init_db.py
    ├── create_admin.py
    ├── run_all_bots.py
    ├── backup_db.py
    ├── migrate_data.py
    └── monitoring.py
```

## 🗃️ Полная схема базы данных

### **Основные таблицы:**

```python
# Enums для всей системы
class UserRole(enum.Enum):
    CLIENT = "client"
    ADMIN = "admin"
    SUPPORT = "support"

class SubscriptionStatus(enum.Enum):
    ACTIVE = "active"
    EXPIRED = "expired"
    SUSPENDED = "suspended"
    PENDING = "pending"

class VpnProtocol(enum.Enum):
    VLESS = "vless"
    OPENVPN = "openvpn"
    WIREGUARD = "wireguard"
    IKEV2 = "ikev2"

class TicketStatus(enum.Enum):
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    WAITING_CLIENT = "waiting_client"
    CLOSED = "closed"

class PaymentStatus(enum.Enum):
    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"
    REFUNDED = "refunded"
```

### **Модели данных:**

#### **Users** - Расширенная модель пользователей
```python
class User(Base):
    # Основная информация
    telegram_id, username, first_name, last_name
    language_code, role, is_active, is_banned
    
    # Предпочтения VPN
    preferred_protocol       # Предпочитаемый протокол
    auto_select_protocol     # Автовыбор протокола
    
    # Временные метки
    created_at, updated_at, last_activity
```

#### **Servers** - Мультипротокольные серверы
```python
class Server(Base):
    # Базовая информация
    name, location, country_code, city
    ip_address, domain
    
    # Поддерживаемые протоколы
    supported_protocols      # JSON: ["vless", "openvpn", "wireguard"]
    primary_protocol         # Основной протокол
    
    # Конфигурации протоколов
    vless_config            # JSON с настройками VLESS/3X-UI
    openvpn_config          # JSON с настройками OpenVPN
    wireguard_config        # JSON с настройками WireGuard
    
    # Метрики
    cpu_usage, memory_usage, disk_usage
    max_users, current_users
```

#### **SubscriptionPlans** - Универсальные тарифы
```python
class SubscriptionPlan(Base):
    name, description, duration_days
    price, currency
    
    # Лимиты
    traffic_limit_gb        # null = безлимит
    device_limit           # Количество устройств
    
    is_active, is_popular
```

#### **Subscriptions** - Активные подписки
```python
class Subscription(Base):
    user_id, server_id, plan_id
    status, started_at, expires_at
    
    # Активный протокол
    active_protocol         # Текущий используемый протокол
    
    # Метрики
    traffic_used_gb, traffic_limit_gb
    auto_renewal
```

#### **VpnConfigs** - Универсальные конфигурации
```python
class VpnConfig(Base):
    subscription_id, server_id
    protocol                # VLESS, OpenVPN, WireGuard
    
    # Данные конфига
    config_data            # JSON специфичный для протокола
    connection_string      # Готовая строка подключения
    qr_code_data          # Данные для QR кода
    
    is_active, last_used
```

#### **Payments** - Система платежей
```python
class Payment(Base):
    user_id, subscription_id
    external_payment_id, payment_method
    amount, currency, status
    created_at, paid_at
```

#### **Support System** - Система поддержки
```python
class SupportTicket(Base):
    user_id, subject, priority, status
    topic_id               # ID топика в супергруппе
    assigned_admin_id      # Назначенный админ
    created_at, closed_at

class SupportMessage(Base):
    ticket_id, user_id, message_text
    is_from_admin, telegram_message_id
    created_at
```

#### **Analytics** - Аналитика и метрики
```python
class UserActivity(Base):
    user_id, action, details
    ip_address, user_agent, created_at

class ServerStats(Base):
    server_id, active_connections
    total_traffic_gb, cpu_usage
    recorded_at
```

## 🔧 Ключевые сервисы

### **VPN Services Architecture:**

```python
# Абстрактный базовый класс
class BaseVpnService:
    async def create_config(user_id, server_id) -> VpnConfig
    async def delete_config(config_id) -> bool
    async def get_connection_string(config_id) -> str
    async def get_usage_stats(config_id) -> dict

# Фабрика протоколов
class VpnFactory:
    @staticmethod
    def get_service(protocol: VpnProtocol, server: Server):
        if protocol == VpnProtocol.VLESS:
            return VlessService(server)
        elif protocol == VpnProtocol.OPENVPN:
            return OpenVpnService(server)
        # ... другие протоколы

# Конкретные реализации
class VlessService(BaseVpnService):
    # Работа с 3X-UI API
    
class OpenVpnService(BaseVpnService):
    # Работа с OpenVPN сервером
    
class WireguardService(BaseVpnService):
    # Работа с WireGuard
```

### **Business Services:**

#### **SubscriptionService** - Управление подписками
- Создание/продление подписок
- Проверка активности
- Автоматическое продление
- Уведомления об окончании

#### **PaymentService** - Платежная система
- Интеграция с ЮKassa, криптоплатежи
- Обработка webhook'ов
- Возвраты и отмены

#### **AnalyticsService** - Аналитика
- Метрики пользователей
- Статистика серверов
- Отчеты для админов

#### **NotificationService** - Уведомления
- Уведомления об окончании подписки
- Системные сообщения
- Рассылки

## 🚀 Преимущества обновленной архитектуры

### **1. Мультипротокольность**
- Единая система для всех VPN протоколов
- Автоматический выбор оптимального протокола
- Легкое добавление новых протоколов

### **2. Масштабируемость**
- Готовность к большому количеству пользователей
- Микросервисная архитектура
- Горизонтальное масштабирование

### **3. Бизнес-готовность**
- Полноценная платежная система
- Аналитика и метрики
- Система поддержки с топиками

### **4. Гибкость**
- JSON конфигурации для адаптации
- Модульная структура
- Легкое тестирование

### **5. Мониторинг**
- Логирование всех действий
- Метрики производительности
- Автоматические уведомления

## 🎯 Особенности для российских клиентов

### **Приоритет VLESS:**
- Автоматический выбор VLESS для РФ IP
- Reality конфигурации для обхода DPI
- Fallback на другие протоколы

### **Локализация:**
- Интерфейс на русском языке
- Техподдержка 24/7
- Инструкции для российских условий

### **Безопасность:**
- Защита от блокировок
- Маскировка трафика
- Антидетект технологии

## 📊 Готовность к продакшену

### **DevOps готовность:**
- Docker контейнеризация
- CI/CD пайплайны
- Мониторинг и алерты

### **Безопасность:**
- Шифрование всех данных
- Защита API endpoints
- Аудит действий администраторов

### **Производительность:**
- Кеширование Redis
- Оптимизированные запросы БД
- Асинхронная обработка

Эта архитектура готова для немедленного старта разработки и масштабирования до промышленных объемов! 🚀